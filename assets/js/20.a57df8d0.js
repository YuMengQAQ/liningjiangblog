(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{408:function(e,n,t){"use strict";t.r(n);var a=t(10),s=Object(a.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"热点后台发布系统项目总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#热点后台发布系统项目总结"}},[e._v("#")]),e._v(" 热点后台发布系统项目总结")]),e._v(" "),t("h2",{attrs:{id:"业务逻辑思路以及遇到的一些问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#业务逻辑思路以及遇到的一些问题"}},[e._v("#")]),e._v(" 业务逻辑思路以及遇到的一些问题")]),e._v(" "),t("ul",[t("li",[e._v("登录通过后端返回的 token 值来进行跳转，并对其进行路由拦截处理，并封装本地存储函数,让 Token 进行数据持久化")]),e._v(" "),t("li",[e._v('内容管理模块则对数据进行渲染，其中运用 el-table 进行表格渲染，其中想要自定义列中的内容要用 template 模板进行编译，其中想要拿到遍历的对象数据，要运用 slot-scope="scope"拿到数据进行下一步操作，其中图片运用了 el-image 进行懒加载处理。')]),e._v(" "),t("li",[e._v("内容管理模块的筛选业务，就是将其每个数据渲染项的父元素绑定其要提交的参数，请求带参，因为请求本身不带参数后台有设置默认参数，最终设置了所有参数。")]),e._v(" "),t("li",[e._v("发布文章模块，使用了 element-tiptap 第三方库，这个库是对 tiptap 进行 element 方法的封装，在路由导航过来传递的 id 可能有过长的原因失真，然后通过 json-bigint 第三方库进行解决，在 request 请求模块中 transformResponse 中去 return jsonBig.parse(data),在使用数据的使用进行 toString 方法。")]),e._v(" "),t("li",[e._v("在图片上传中有个问题，就是上传的图片是渲染在标签中的，因为图片是进行编码的，这个编码会很长很长，所以要进行处理，")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('   new Image({\n          async uploadRequest(file) {\n            //将文件对象转为formdata\n            let fd = new FormData();\n            fd.append("image", file);\n            //请求线上的url地址，最终返回\n            const { data: res } = await getImgUrl(fd);\n            return res.data.url;\n          },\n        }),\n')])])]),t("ul",[t("li",[t("p",[e._v("还有 element 组件中有些组件@click 事件不起效，可以通过.native 修饰符让其生效")])]),e._v(" "),t("li",[t("p",[e._v("接口文档说明可能不完整，昨天遇到一个问题，响应报文中有个 value does not match pattern，值不匹配。以后出错看响应报文到底报什么错，仔细理解其含义")])]),e._v(" "),t("li",[t("p",[e._v("文章评论模块中有一个让el-switch开关让其在loading状态中并禁用点击，但是接口中没有loading这种属性。")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("解决方案：所以将其拿到的数组添加一个属性，默认为false，当loading状态开启时，禁用的属性同时也是为true，:disabled绑定的就是这个添加的loading属性")]),e._v(" "),t("ul",[t("li",[t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" //添加一个statusLoading开关加载状态,默认设置false,为了防止点击很多次发送多次请求\n      results.forEach((result) => {\n        result.statusLoading = false;\n      });\n")])])])])])])])]),e._v(" "),t("li",[t("p",[e._v("素材管理模块其中素材列表进行了封装，可以进行组件定制。其中添加素材按钮使用了element-upload组件。")]),e._v(" "),t("ul",[t("li",[t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('\x3c!-- 文件上传 --\x3e\n      \x3c!-- action设置请求地址，name设置上传的字段名，设置上传的请求头部 --\x3e\n      <el-upload\n        class="upload-demo"\n        action="http://api-toutiao-web.itheima.net/mp/v1_0/user/images"\n        :headers="upLoadHeader"\n        name="image"\n        drag\n        :on-success="onUploadSuccess"\n        multiple\n        :show-file-list="false"\n      >\n        <i class="el-icon-upload"></i>\n        <div class="el-upload__text">将文件拖到此处，或<em>点击上传</em></div>\n        <div class="el-upload__tip" slot="tip">\n          只能上传jpg/png文件，且不超过500kb\n        </div>\n      </el-upload>\n')])])])]),e._v(" "),t("li",[t("p",[e._v("上传必须携带token,也可以自己定义事件上传，只不过稍微有点麻烦。")]),e._v(" "),t("ul",[t("li",[t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" //上传的请求头\n      upLoadHeader: {\n        Authorization: `Bearer ${user.token}`,\n      },\n")])])])])])])])]),e._v(" "),t("li",[t("p",[e._v("发布文章模块使用了一个element-tiptap富文本编辑器，并将上传封面单独封装成一个组件，由于发布文章和修改文章都是同一个页面，所以需要根据$route参数来判断发送请求。")]),e._v(" "),t("ul",[t("li",[t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("this.loadChannel();\n    if (this.$route.query.id) {\n      this.loadAssignArticle();\n    }\n")])])])]),e._v(" "),t("li",[t("p",[e._v("修改和更改文章内容也是如此")]),e._v(" "),t("ul",[t("li",[t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('onPublish(draft) {\n\nthis.$refs["publishForm"].validate(async (valid) => {\n\n​    if (!valid) {\n\n​     return;\n\n​    }\n\n​    const articleId = this.$route.query.id;\n\n​    if (articleId) {\n\n​     //修改文章的操作\n\n​     await updateAssignArticle(articleId, this.article, draft);\n\n​     this.$message({\n\n​      message: "修改成功",\n\n​      type: "success",\n\n​     });\n\n​     this.$router.push("/article");\n\n​    } else {\n\n​     await publishArticle(this.article, draft);\n\n​     this.$message({\n\n​      message: "发布成功",\n\n​      type: "success",\n\n​     });\n\n​     this.article.title = "";\n\n​     this.article.content = "";\n\n​     this.$router.push("/article");\n\n​    }\n\n   });\n\n  },\n\n\n')])])])])])]),e._v(" "),t("li",[t("p",[e._v("关于富文本编辑器element-tiptap进行一个总结")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("先安装")]),e._v(" "),t("ul",[t("li",[t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("npm i element-tiptap\n")])])])])])]),e._v(" "),t("li",[t("p",[e._v("初始配置")]),e._v(" "),t("ul",[t("li",[t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("<template>\n  <el-tiptap v-model=\"content\" :extensions=\"extensions\"></el-tiptap>\n</template>\n\n<script>\n import {\n  ElementTiptap,\n  Doc,\n  Text,\n  Paragraph,\n  Heading,\n  Bold,\n  Underline,\n  Italic,\n  Image,\n  Strike,\n  ListItem,\n  BulletList,\n  OrderedList,\n  TodoItem,\n  TodoList,\n  HorizontalRule,\n  Fullscreen,\n  Preview,\n  CodeBlock\n} from 'element-tiptap'\nimport 'element-tiptap/lib/index.css'\n\nexport default {\n  components: {\n    'el-tiptap': ElementTiptap\n  },\n  data () {\n    return {\n      content: 'hello world',\n      extensions: [\n        new Doc(),\n        new Text(),\n        new Paragraph(),\n        new Heading({ level: 3 }),\n        new Bold({ bubble: true }), // 在气泡菜单中渲染菜单按钮\n        new Image(),\n        new Underline(), // 下划线\n        new Italic(), // 斜体\n        new Strike(), // 删除线\n        new HorizontalRule(), // 华丽的分割线\n        new ListItem(),\n        new BulletList(), // 无序列表\n        new OrderedList(), // 有序列表\n        new TodoItem(),\n        new TodoList(),\n        new Fullscreen(),\n        new Preview(),\n        new CodeBlock()\n      ]\n    }\n  }\n}\n<\/script>\n")])])])])])])])]),e._v(" "),t("li",[t("p",[e._v("在上传封面组件中又一次使用了el-tabs组件，并对其imag-list素材库组件进行了个性化定制。其中文件上传使用了file类型的input框，在选择框div中设置input框的点击。")]),e._v(" "),t("ul",[t("li",[t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("  el-tabs 组件\n          v-model 双向绑定\n            数据驱动视图：当绑定数据发生改变，激活的标签页受影响\n            视图影响数据：当标签改变的时候，标签的 name 会同步到数据中\n          label 标签的标题\n          name 相当于标签的 id\n")])])])])])]),e._v(" "),t("li",[t("p",[e._v("在确定提交文件的时候，做判断，并且上传图片的化拿到的是文件对象，需要去请求接口返回url地址。")]),e._v(" "),t("ul",[t("li",[t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('//确定提交文件\n    async onUploadCover() {\n      if (this.activeName === "upload") {\n        const file = this.$refs.uploadCover.files[0];\n        //上传图片\n        if (!file) {\n          this.$message("请选择图片");\n          return;\n        }\n        const fd = new FormData();\n        fd.append("image", file);\n        //上传用户素材返回url\n        const { data: res } = await getImgUrl(fd);\n        this.publishImage = res.data.url;\n        //关闭对话框\n        this.uploadDialogVisible = false;\n        this.$message({\n          message: "上传图片成功",\n          type: "success",\n        });\n        //向父组件传url\n        // this.$emit("update-url", this.publishImage);\n        this.$emit("input", this.publishImage);\n        //隐藏加号元素\n        this.$refs["addImage"].style = "display:none";\n      } else if (this.activeName === "image") {\n        //获取组件元素，通过refs方式\n        const imageList = this.$refs["imageList"];\n        const selected = imageList.selected;\n        if (selected === null) {\n          this.$message("请选择图片");\n          return;\n        }\n\n        //关闭对话框\n        this.uploadDialogVisible = false;\n        //发送父组件图片地址\n        this.$emit("input", imageList.imageList[selected].url);\n        //隐藏加号元素\n        this.$refs["addImage"].style = "display:none";\n        //消息框\n        this.$message({\n          message: "上传图片成功",\n          type: "success",\n        });\n      }\n')])])])])])]),e._v(" "),t("li",[t("p",[e._v("Upload-file这个上传封面组件进行了v-model绑定。")]),e._v(" "),t("ul",[t("li",[e._v("一个组件上的 "),t("code",[e._v("v-model")]),e._v(" 默认会利用名为 "),t("code",[e._v("value")]),e._v(" 的 prop 和名为 "),t("code",[e._v("input")]),e._v(" 的事件，但是像单选框、复选框等类型的输入控件可能会将 "),t("code",[e._v("value")]),e._v(" attribute 用于"),t("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/checkbox#Value",target:"_blank",rel:"noopener noreferrer"}},[e._v("不同的目的"),t("OutboundLink")],1),e._v("。"),t("code",[e._v("model")]),e._v(" 选项可以用来避免这样的冲突：")])])])])]),e._v(" "),t("li",[t("p",[e._v("粉丝管理模块是对数据进行简单的渲染，其中粉丝统计用到了echarts，具体操作看echarts的文档。")])]),e._v(" "),t("li",[t("p",[e._v("个人设置模块则获取到用户信息进行初始化渲染，并且使用到了图片裁切，运用的是cropper.js，先上传图片直接开始裁切。个人设置的上传图片稍有不同。")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("通过的是label for 和Input 的id属性建立联系")]),e._v(" "),t("ul",[t("li",[t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(' <label for="file" class="avatar-wrap">\n            <el-avatar :size="150" fit="cover" :src="user.photo"></el-avatar>\n            <el-tag class="avatar-title">点击修改头像</el-tag>\n          </label>\n          <input\n            type="file"\n            hidden\n            id="file"\n            ref="imgInput"\n            @change="onUploadChange"\n          />\n')])])])])])]),e._v(" "),t("li",[t("p",[e._v("cropper.js裁切安装及使用过程")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("先安装")]),e._v(" "),t("ul",[t("li",[t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("npm install cropperjs\n")])])])])])]),e._v(" "),t("li",[t("p",[e._v("再导入css和裁切")]),e._v(" "),t("ul",[t("li",[t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('import "cropperjs/dist/cropper.css";\nimport Cropper from "cropperjs";\n')])])])])])]),e._v(" "),t("li",[t("p",[e._v("最后在打开dialog弹出框的时候初始化裁切器，在关闭的时候销毁裁切器。如果需要在组件初始化就进行初始化裁切器的话，则需要在mounted函数中。")]),e._v(" "),t("ul",[t("li",[t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('//弹出框确定提交\n    onSuccessSumbit() {\n      //开启成功的加载状态\n      this.sucessLoading = true;\n      this.cropper.getCroppedCanvas().toBlob(async (file) => {\n        const fd = new FormData();\n        fd.append("photo", file);\n        //发送请求\n        await updateUserPhoto(fd);\n        //关闭对话框\n        this.imgDialogVisible = false;\n        this.$message({\n          message: "更新头像成功",\n          type: "success",\n        });\n        //更改用户地址\n        this.user.photo = window.URL.createObjectURL(file);\n        //通过事件总线存储这个预览图片\n        globalBus.$emit("updateImg", this.previewImage);\n        //关闭加载状态\n        this.sucessLoading = false;\n      });\n    },\n')])])])]),e._v(" "),t("li",[t("p",[e._v("在个人设置页面提交图片成功后头像成功更改，但是顶部的头像和名字不会更改，因为是非父子组件，跨级组件之间则需要事件总线来解决问题。")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("先封装一个总线js文件并导出")]),e._v(" "),t("ul",[t("li",[t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('import Vue from "vue";\nexport default new Vue();\n')])])])])])]),e._v(" "),t("li",[t("p",[e._v("在需要通信的组件互相导入")]),e._v(" "),t("ul",[t("li",[t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('import globalBus from "@/utils/global-bus";\n')])])])])])]),e._v(" "),t("li",[t("p",[e._v("A向B组件发射事件，比如这里个人设置页面发送给layout组件")]),e._v(" "),t("ul",[t("li",[t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(' globalBus.$emit("updateName", res.data.name);\n globalBus.$emit("updateImg", this.previewImage);\n')])])])])])]),e._v(" "),t("li",[t("p",[e._v("B组件进行注册，接受一个回调函数")]),e._v(" "),t("ul",[t("li",[t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(' //更新名字\n    globalBus.$on("updateName", (name) => {\n      this.user.name = name;\n    });\n    //更新图片\n    globalBus.$on("updateImg", (img) => {\n      this.user.photo = img;\n    });\n')])])])])])])])])])])])])])]),e._v(" "),t("li",[t("p",[e._v("最近对项目进行了一些简单的打包优化处理")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("所谓的优化主要涉及到两方面：")]),e._v(" "),t("ul",[t("li",[e._v("构建速度的优化")]),e._v(" "),t("li",[e._v("构建质量的优化")])])]),e._v(" "),t("li",[t("p",[e._v("Gzip 压缩")]),e._v(" "),t("ul",[t("li",[e._v("Gzip 压缩是一种数据传输过程中的压缩方式，它可以极大的压缩文件的大小。注意：它不影响原始文件。")]),e._v(" "),t("li",[e._v("网站加载的速度很大程序取决于网站资源文件的大小，减少要传输的文件的大小可以使网站不仅加载更快，而且对于那些宽带是按量计费的用户来说也更友好。")]),e._v(" "),t("li",[e._v("HTTP协议上的GZIP编码是一种用来改进WEB应用程序性能的技术。")]),e._v(" "),t("li",[e._v("好处：Gzip 开启以后会将输出到用户浏览器的数据进行压缩的处理，这样就会减小通过网络传输的数据量，提高文件传输的速度。")]),e._v(" "),t("li",[e._v("备注：一般是部署的时候设置，比如：nginx、Tomcat…")])])]),e._v(" "),t("li",[t("p",[e._v("不打包第三方包")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("作用：提高编译的速度。")])]),e._v(" "),t("li",[t("p",[e._v("影响打包速度最根本的原因就是某些第三方包体积过大，所以打包速度就很慢。解决它的办法也非常简单：不对它打包！不要让 webpack 来处理它。可是不处理它，把它放哪里呢？通过 "),t("code",[e._v("script")]),e._v(" 标签加载它，就不被 webpack 处理了。我们推荐使用第三方的 CDN 来加载资源，所谓的 CDN 说白了就是一个在线链接。")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("bootcdn：不错，国内的一个服务")])]),e._v(" "),t("li",[t("p",[e._v("cdnjs：不推荐，国外的，速度慢")])]),e._v(" "),t("li",[t("p",[e._v("unpkg：不推荐，国外的，速度慢")])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://www.jsdelivr.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("jsdelivr"),t("OutboundLink")],1),e._v(" ：国外的，但是在国内有它的服务节点，推荐")])]),e._v(" "),t("li",[t("ul",[t("li",[e._v("全球 CDN 优化")])])]),e._v(" "),t("li",[t("ul",[t("li",[e._v("凡是能通过 npm 下载的包，它里面都有")])])])])]),e._v(" "),t("li",[t("p",[e._v("但是通过 script 标签加载的资源如何使用呢？那就得做一些特殊配置了。")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("在项目的根目录创建 "),t("code",[e._v("vue.config.js")])]),e._v(" "),t("ul",[t("li",[t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("/**\n * Vue CLI 的配置文件\n * 这里可以自定义 VueCLI 内部的 webpack 配置\n */\n\n// 该配置文件必须导出一个对象（Node 中的模块语法）\nmodule.exports = {\n  // 自定义 VueCLI 中的 webpack 配置\n  configureWebpack: {\n    // 告诉 webpack 使用 script 标签加载的那个资源，而不是去 node_moudles 中打包处理\n    externals: {\n      // 属性名：你加载的那个包名\n      // 属性值：script 标签暴露的全局变量，注意，写到字符串中！！！\n      // 'element-ui': 'ELEMENT'\n      'vue': 'Vue',\n      'element-ui': 'ELEMENT',\n      'echarts': 'echarts'\n    }\n  }\n}\n")])])])])])])])])])]),e._v(" "),t("li",[t("p",[e._v("最后进行打包测试")])]),e._v(" "),t("li",[t("p",[e._v("进行路由懒加载")])]),e._v(" "),t("li",[t("p",[e._v("按需加载第三方组件")])]),e._v(" "),t("li",[t("p",[e._v("缓存和并行处理")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("VueCLI 内置了：")]),e._v(" "),t("ul",[t("li",[t("p",[t("code",[e._v("cache-loader")]),e._v(" 会默认为 Vue/Babel/TypeScript 编译开启。文件会缓存在 "),t("code",[e._v("node_modules/.cache")]),e._v(" 中——如果你遇到了编译方面的问题，记得先删掉缓存目录之后再试试看。")])]),e._v(" "),t("li",[t("p",[t("code",[e._v("thread-loader")]),e._v(" 会在多核 CPU 的机器上为 Babel/TypeScript 转译开启")])])])]),e._v(" "),t("li",[t("p",[e._v("如果你没有使用 VueCLI，自己搭建的 webpak，建议加上这两个工具优化构建速度。")])])])])])]),e._v(" "),t("li",[t("p",[e._v("补充一下：功能优化")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("在客户端造成的一系列响应码的处理以及有人非正常登录的处理")])]),e._v(" "),t("li",[t("p",[e._v("在axios响应拦截器中处理")]),e._v(" "),t("ul",[t("li",[t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('request.interceptors.response.use(\n  function(response) {\n    // 在接收响应做些什么，例如跳转到登录页\n\n    return response;\n  },\n  function(error) {\n    // 对响应错误做点什么\n    if (error.response && error.response.status === 401) {\n      //清除本地伪造的user\n      removeItem("user");\n      //跳转到登录页\n      router.push("/login");\n      Message.error("登录状态无效，请重新登录");\n    } else if (error.response.status === 403) {\n      Message.error({\n        type: "warning",\n        message: "没有操作权限",\n      });\n    } else if (error.response.status === 400) {\n      Message.error("请求参数错误");\n    } else if (error.response.status >= 500) {\n      Message.error("服务器内容错误，请稍后再试");\n    }\n    return Promise.reject(error);\n  }\n);\n')])])])])])])])])])])}),[],!1,null,null,null);n.default=s.exports}}]);